name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}/backend
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=ref,event=branch
          type=sha,format=short

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=ref,event=branch
          type=sha,format=short

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./ui
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    concurrency: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name eternia-staging --region ${{ secrets.AWS_REGION }}

    - name: Deploy to staging
      run: |
        # Set the image tag to the short SHA of the commit
        IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
        
        # Update the Kubernetes manifests with the new image tag
        sed -i "s|ghcr.io/${{ github.repository }}/backend:.*|ghcr.io/${{ github.repository }}/backend:$IMAGE_TAG|g" kubernetes/staging/*.yaml
        sed -i "s|ghcr.io/${{ github.repository }}/frontend:.*|ghcr.io/${{ github.repository }}/frontend:$IMAGE_TAG|g" kubernetes/staging/*.yaml
        
        # Apply the Kubernetes manifests
        kubectl apply -f kubernetes/staging/

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/eternia-backend -n eternia-staging
        kubectl rollout status deployment/eternia-frontend -n eternia-staging

  deploy-production:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name eternia-production --region ${{ secrets.AWS_REGION }}

    - name: Deploy to production
      run: |
        # If this is a tag, use the tag as the image tag, otherwise use the short SHA
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          IMAGE_TAG="${{ github.ref_name }}"
        else
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
        fi
        
        # Update the Kubernetes manifests with the new image tag
        sed -i "s|ghcr.io/${{ github.repository }}/backend:.*|ghcr.io/${{ github.repository }}/backend:$IMAGE_TAG|g" kubernetes/production/*.yaml
        sed -i "s|ghcr.io/${{ github.repository }}/frontend:.*|ghcr.io/${{ github.repository }}/frontend:$IMAGE_TAG|g" kubernetes/production/*.yaml
        
        # Apply the Kubernetes manifests
        kubectl apply -f kubernetes/production/

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/eternia-backend -n eternia-production
        kubectl rollout status deployment/eternia-frontend -n eternia-production