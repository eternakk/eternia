# OpenTelemetry Collector configuration for Eternia

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Receive traces from Python applications using OpenTelemetry SDK
  otlp/python:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Receive traces from JavaScript applications using OpenTelemetry SDK
  otlp/js:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:
    # Batch size and timeout for sending traces
    send_batch_size: 1000
    timeout: 10s

  # Add attributes to all spans
  attributes:
    actions:
      - key: environment
        value: ${ENVIRONMENT}
        action: upsert
      - key: service.namespace
        value: eternia
        action: upsert

  # Filter out health check spans to reduce noise
  filter:
    spans:
      exclude:
        match_type: regexp
        attributes:
          - key: http.url
            value: ".*/health.*"

  # Sample traces to reduce volume in production
  probabilistic_sampler:
    hash_seed: 22
    sampling_percentage: 100 # 100% in dev/staging, reduce to 10% in production

  # Add resource information to spans
  resource:
    attributes:
      - key: service.name
        value: ${SERVICE_NAME}
        action: upsert
      - key: deployment.environment
        value: ${ENVIRONMENT}
        action: upsert

exporters:
  # Export traces to Jaeger
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Export traces to logging (for debugging)
  logging:
    verbosity: detailed

  # Export metrics to Prometheus
  prometheus:
    endpoint: 0.0.0.0:8889

  # Export traces to OTLP (for other collectors)
  otlp:
    endpoint: jaeger:4317
    tls:
      insecure: true

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp, otlp/python, otlp/js]
      processors: [batch, attributes, filter, probabilistic_sampler, resource]
      exporters: [jaeger, logging, otlp]
    metrics:
      receivers: [otlp, otlp/python, otlp/js]
      processors: [batch, attributes, resource]
      exporters: [prometheus, logging]