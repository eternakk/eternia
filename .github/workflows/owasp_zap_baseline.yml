name: OWASP ZAP Baseline Scan

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target base URL to scan (e.g., https://staging.example.com)'
        required: true
        type: string
      fail_on:
        description: 'Minimum alert threshold to fail the job (pass|info|low|medium|high)'
        required: false
        default: 'medium'
        type: choice
        options: [pass, info, low, medium, high]
  schedule:
    # Weekly scan at 03:00 UTC on Mondays. You can remove the schedule if not desired.
    - cron: '0 3 * * 1'

permissions:
  contents: read

jobs:
  zap-baseline:
    name: ZAP Baseline (${{ github.event.inputs.target_url || vars.ZAP_TARGET_URL || secrets.ZAP_TARGET_URL || 'unset' }})
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || vars.ZAP_TARGET_URL != '' || secrets.ZAP_TARGET_URL != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve target URL
        id: resolve
        run: |
          if [ -n "${{ github.event.inputs.target_url }}" ]; then
            echo "target=${{ github.event.inputs.target_url }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ vars.ZAP_TARGET_URL }}" ]; then
            echo "target=${{ vars.ZAP_TARGET_URL }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ secrets.ZAP_TARGET_URL }}" ]; then
            echo "target=${{ secrets.ZAP_TARGET_URL }}" >> $GITHUB_OUTPUT
          else
            echo "No target URL provided via input or repo vars/secrets; failing early." >&2
            exit 1
          fi

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ steps.resolve.outputs.target }}
          # Do not actively attack; baseline spider + passive scan only
          rules_file_name: .zap/rules.tsv
          cmd_options: >-
            -a
            -m 10
            -d
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: report.html

      - name: Fail on minimum alert threshold
        if: always()
        run: |
          FAIL_ON=${{ github.event.inputs.fail_on || 'medium' }}
          echo "Fail threshold: ${FAIL_ON}"
          # Map levels to numeric for comparison
          case "$FAIL_ON" in
            pass) THRESH=0 ;;
            info) THRESH=1 ;;
            low) THRESH=2 ;;
            medium) THRESH=3 ;;
            high) THRESH=4 ;;
            *) THRESH=3 ;;
          esac
          # Parse ZAP report summary if present; simple grep-based counts
          SUMMARY_FILE=report.md
          if [ -f "$SUMMARY_FILE" ]; then
            INFO=$(grep -Eo "Info: [0-9]+" "$SUMMARY_FILE" | awk '{print $2}' || echo 0)
            LOW=$(grep -Eo "Low: [0-9]+" "$SUMMARY_FILE" | awk '{print $2}' || echo 0)
            MED=$(grep -Eo "Medium: [0-9]+" "$SUMMARY_FILE" | awk '{print $2}' || echo 0)
            HIGH=$(grep -Eo "High: [0-9]+" "$SUMMARY_FILE" | awk '{print $2}' || echo 0)
          else
            # Fallback to zero if summary missing
            INFO=0; LOW=0; MED=0; HIGH=0
          fi
          echo "ZAP alerts â€” High: $HIGH, Medium: $MED, Low: $LOW, Info: $INFO"
          LEVEL=0
          [ "$INFO" -gt 0 ] && LEVEL=1
          [ "$LOW" -gt 0 ] && LEVEL=2
          [ "$MED" -gt 0 ] && LEVEL=3
          [ "$HIGH" -gt 0 ] && LEVEL=4
          if [ $LEVEL -ge $THRESH ]; then
            echo "Failing due to alerts meeting threshold ($LEVEL >= $THRESH)." >&2
            exit 1
          else
            echo "Alerts below threshold; passing job."
          fi
