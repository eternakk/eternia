name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.0)'
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is_prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
    steps:
      - name: Get version from tag
        id: get-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ $VERSION == *"-alpha"* || $VERSION == *"-beta"* || $VERSION == *"-rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  validate:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements.txt

      - name: Run tests
        run: |
          pytest tests/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./ui
        run: npm ci

      - name: Run frontend tests
        working-directory: ./ui
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: [prepare, validate]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:${{ needs.prepare.outputs.version }}
            ghcr.io/${{ github.repository }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./ui
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:${{ needs.prepare.outputs.version }}
            ghcr.io/${{ github.repository }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configuration: .github/changelog-config.json
          toTag: ${{ needs.prepare.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.is_prerelease == 'true' }}
          files: |
            CHANGELOG.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.is_prerelease == 'true'
    environment: staging
    concurrency: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name eternia-staging --region ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Update the Kubernetes manifests with the new image tag
          sed -i "s|ghcr.io/${{ github.repository }}/backend:.*|ghcr.io/${{ github.repository }}/backend:${{ needs.prepare.outputs.version }}|g" kubernetes/staging/*.yaml
          sed -i "s|ghcr.io/${{ github.repository }}/frontend:.*|ghcr.io/${{ github.repository }}/frontend:${{ needs.prepare.outputs.version }}|g" kubernetes/staging/*.yaml
          
          # Apply the Kubernetes manifests
          kubectl apply -f kubernetes/staging/

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/eternia-backend -n eternia-staging
          kubectl rollout status deployment/eternia-frontend -n eternia-staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.is_prerelease != 'true'
    environment: production
    concurrency: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name eternia-production --region ${{ secrets.AWS_REGION }}

      - name: Deploy to production
        run: |
          # Update the Kubernetes manifests with the new image tag
          sed -i "s|ghcr.io/${{ github.repository }}/backend:.*|ghcr.io/${{ github.repository }}/backend:${{ needs.prepare.outputs.version }}|g" kubernetes/production/*.yaml
          sed -i "s|ghcr.io/${{ github.repository }}/frontend:.*|ghcr.io/${{ github.repository }}/frontend:${{ needs.prepare.outputs.version }}|g" kubernetes/production/*.yaml
          
          # Apply the Kubernetes manifests
          kubectl apply -f kubernetes/production/

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/eternia-backend -n eternia-production
          kubectl rollout status deployment/eternia-frontend -n eternia-production

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: releases
          SLACK_COLOR: good
          SLACK_TITLE: Release ${{ needs.prepare.outputs.version }} deployed successfully
          SLACK_MESSAGE: "Release ${{ needs.prepare.outputs.version }} has been deployed to ${{ needs.prepare.outputs.is_prerelease == 'true' && 'staging' || 'production' }}"
          SLACK_FOOTER: "Eternia Release Process"

      - name: Notify Slack on failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: releases
          SLACK_COLOR: danger
          SLACK_TITLE: Release ${{ needs.prepare.outputs.version }} deployment failed
          SLACK_MESSAGE: "Release ${{ needs.prepare.outputs.version }} deployment to ${{ needs.prepare.outputs.is_prerelease == 'true' && 'staging' || 'production' }} has failed"
          SLACK_FOOTER: "Eternia Release Process"